# Generated by OpenSesame 0.27.2~pre6 (Frisky Freud)
# Thu May  9 14:20:25 2013 (posix)
# <http://www.cogsci.nl/opensesame>

set foreground "white"
set subject_parity "even"
set font_size "18"
set description "An attentional-capture experiment"
set title "Theeuwes (1992)"
set transparent_variables "no"
set font_bold "no"
set compensation "0"
set coordinates "relative"
set height "768"
set mouse_backend "psycho"
set width "1024"
set sampler_backend "legacy"
set font_family "mono"
set keyboard_backend "psycho"
set background "black"
set subject_nr "0"
set canvas_backend "psycho"
set start "experiment"
set synth_backend "legacy"
set font_italic "no"

define sketchpad start_practice
	set duration "keypress"
	set description "Displays stimuli"
	set start_response_interval "no"
	draw textline 0 -64 "You will start with a short practice phase" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 0 64 "Press any key to begin ..." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"

define sketchpad fixdot
	set duration "600"
	set description "A fixation dot"
	set start_response_interval "no"
	draw fixdot 0 0 color=white show_if="always"

define feedback feedback
	draw textline 0 -128 "Your average response time was [avg_rt]ms" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 0 -64 "Your accuracy was [acc]%" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 0 64 "Press any key to continue ..." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"

define sequence experiment
	set description "The main experimental sequence"
	run instruction_form "always"
	run start_practice "always"
	run practice_loop "always"
	run end_of_practice "always"
	run experimental_loop "always"
	run goodbye "always"

define sketchpad end_of_practice
	set duration "keypress"
	set description "Tell the participant that the practice phase is finished"
	set start_response_interval "no"
	draw textline 0 -64 "The practice phase is finished" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 0 64 "Press any key to start the real experiment ..." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"

define sketchpad cross
	set duration "600"
	set description "A fixation cross"
	set start_response_interval "no"
	draw line 0 -8 0 8 penwidth=2 color=white show_if="always"
	draw line -8 0 8 0 penwidth=2 color=white show_if="always"

define sketchpad red_fixdot
	set duration "500"
	set description "Displays stimuli"
	set start_response_interval "no"
	draw fixdot 0 0 color=red show_if="always"

define loop block_loop
	set repeat "4"
	set description "A block of trials"
	set item "trial_sequence"
	set column_order "display_size;distractor"
	set cycles "6"
	set order "random"
	setcycle 0 display_size "5"
	setcycle 0 distractor "present"
	setcycle 1 display_size "7"
	setcycle 1 distractor "present"
	setcycle 2 display_size "9"
	setcycle 2 distractor "present"
	setcycle 3 display_size "5"
	setcycle 3 distractor "absent"
	setcycle 4 display_size "7"
	setcycle 4 distractor "absent"
	setcycle 5 display_size "9"
	setcycle 5 distractor "absent"
	run trial_sequence

define reset_feedback reset_feedback

define sequence trial_sequence
	set description "A single trial"
	run cross "always"
	run fixdot "always"
	run search_display "always"
	run keyboard_response "always"
	run red_fixdot "[correct] = 0"
	run green_fixdot "[correct] = 1"
	run logger "always"

define loop experimental_loop
	set item "block_sequence"
	set cycles "2"
	set description "Run a number of experimental blocks"
	set repeat "8"
	set order "random"
	setcycle 0 practice "no"
	setcycle 0 condition "color"
	setcycle 1 practice "no"
	setcycle 1 condition "form"
	run block_sequence

define sketchpad goodbye
	set duration "keypress"
	set description "Say goodbye!"
	set start_response_interval "no"
	draw textline 0 -64 "The experiment is finished!" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 0 64 "Press any key to exit ..." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"

define keyboard_response keyboard_response
	set allowed_responses "z;slash"
	set description "Collects keyboard responses"
	set timeout "2000"

define sketchpad instruction_form
	set duration "keypress"
	set description "Present instruction for the form condition"
	set start_response_interval "no"
	draw textline 0 -64 "Your goal is to report the orientation" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 0 0 "of the line in the green circle" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 0 64 "Press any key to continue ..." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline -288 288 "Horizontal = 'z'-key" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 288 288 "Vertical = '/'-key" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw circle -288 224 64 fill=0 penwidth=3 color=green show_if="always"
	draw circle 288 224 64 fill=0 penwidth=3 color=green show_if="always"
	draw line -310 224 -266 224 penwidth=2 color=white show_if="always"
	draw line 288 202 288 246 penwidth=2 color=white show_if="always"

define logger logger
	set description "Logs experimental data"
	log "display_size"
	log "distractor"
	log "practice"
	log "condition"
	log "response"
	log "correct"
	log "response_time"

define sequence block_sequence
	set description "An instruction screen, followed by a block of trials and feedback"
	run reset_feedback "always"
	run block_loop "always"
	run feedback "always"

define loop practice_loop
	set repeat "1"
	set description "Run a single practice block"
	set item "block_sequence"
	set column_order "practice;condition"
	set cycles "2"
	set order "random"
	setcycle 0 practice "yes"
	setcycle 0 condition "color"
	setcycle 1 practice "yes"
	setcycle 1 condition "form"
	run block_sequence

define sketchpad green_fixdot
	set duration "500"
	set description "Displays stimuli"
	set start_response_interval "no"
	draw line 0 0 0 0 penwidth=1 color=green show_if="always"
	draw fixdot 0 0 color=green show_if="always"

define inline_script search_display
	___run__
	# Show the canvas!
	self.c.show()
	__end__
	___prepare__
	# We need the random module and the math module
	import random
	import math
	
	#
	# STEP 1
	#
	# Determine the shape and color of the
	# target, distractor and non-targets
	#
	
	if self.get("condition") == "color":
	
		# In the color condition, participants search
		# for a green circle. The nontargets are red
		# circles. The distractor (if present) is a
		# red square.
	
		target_color = "green"
		nontarget_color = "red"
		distractor_color = "red"
	
		target_shape = "circle"
		nontarget_shape = "circle"
		distractor_shape = "square"
	
	else:
	
		# In the form condition, participants also 
		# search for a green circle. The nontargets
		# are green squares. The distractor (if
		# present) is a red square.
	
		target_color = "green"
		nontarget_color = "green"
		distractor_color = "red"
	
		target_shape = "circle"
		nontarget_shape = "square"
		distractor_shape = "square"
	
	#
	# STEP 2
	#
	# Create a list filled with the target, the
	# distractor (if present) and a number of
	# non-targets, which depends on the display
	# size.
	#
	
	# Create an empty list of stimuli
	stimuli = []
	
	# Randomly pick a target orientation (0 = horzontal, 90 = vertical)
	# and add the target to the list of stimuli
	target_orient = random.choice( (0, 90) )
	stimuli.append( (target_color, target_shape, target_orient) )
	
	# If the distractor is present, get a random orientation
	# and add it to the list of stimuli
	if self.get("distractor") == "present":
		distractor_orient = random.choice( (22.5, 45, 67.5, 112.5, 135, 157.5) )
		stimuli.append( (distractor_color, distractor_shape, distractor_orient) )
	
	# Add the remaining nontarget stimuli to the list
	for i in range(self.get("display_size") - len(stimuli)):
		nontarget_orient = random.choice( (22.5, 45, 67.5, 112.5, 135, 157.5) )
		stimuli.append( (nontarget_color, nontarget_shape, nontarget_orient) )
	
	# Make sure that the order of the stimuli (which will be translated in
	# positions) is randomized.
	random.shuffle(stimuli)
	
	#
	# STEP 3
	#
	# 'correct_response' is a special variable that, if it exists,
	# is interpreted as the expected response by the
	# keyboard_response item
	#
	
	if target_orient == 0:
		self.experiment.set("correct_response", "z")
	else:
		self.experiment.set("correct_response", "slash")
	
	#
	# STEP 4
	#
	# Create an offline canvas containing all off the stimuli
	# and a fixation dot
	#
		
	# Create a new offline canvas
	self.c = self.offline_canvas()
	
	# Draw a fixation dot in the center of the display
	self.c.fixdot()
	
	# We want the stimuli to have some body
	self.c.set_penwidth(3)
	
	radius = 250 # Distance of the stimuli from the center
	stim_size = 40 # Size of the stimuli (the shapes)
	line_length = 20 # Size of the lines in the shapes
	
	# The angular separation of the stimuli depends on the
	# display size.
	angular_separation = 360.0 / self.get("display_size")
	
	# The first stimulis is drawn at angle 0
	angle = 0
	
	# Walk through all the stimuli
	for color, shape, orient in stimuli:
	
		# Determine the coordinates of the stimulus
		x = self.get("width") / 2 + radius * math.cos(math.radians(angle))
		y = self.get("height") / 2 + radius * math.sin(math.radians(angle))
	
		# Set the color of the stimulus
		self.c.set_fgcolor(color)
	
		# Draw the stimulus
		if shape == "circle":
			self.c.ellipse(x - stim_size, y - stim_size, 2 * stim_size, 2 * stim_size)
		else:
			self.c.rect(x - stim_size, y - stim_size, 2 * stim_size, 2 * stim_size)
	
		# The lines are white
		self.c.set_fgcolor("white")
	
		# Determine the dx and dy, which reflect the orientation of the line
		orient = math.radians(orient)
		dx = line_length * math.cos(orient)
		dy = line_length * math.sin(orient)
	
		# Draw the line
		self.c.line(x - dx, y - dy, x + dx, y + dy)
		
		# Make sure the next stimulus is drawn at a different location
		angle += angular_separation
	__end__
	set description "The search display"

