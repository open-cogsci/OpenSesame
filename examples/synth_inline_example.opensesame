# Generated by OpenSesame 0.25-pre1 (Dashy Darwin)
# Thu Sep 15 16:52:57 2011 (posix)

set foreground "white"
set subject_parity "even"
set description "Shows how to control the synth module with inline code"
set title "Synth inline example"
set sampler_backend "legacy"
set coordinates "relative"
set height "768"
set mouse_backend "legacy"
set width "1024"
set compensation "0"
set keyboard_backend "legacy"
set background "black"
set subject_nr "0"
set canvas_backend "legacy"
set start "experiment"
set synth_backend "legacy"

define inline_script inline_script
	___run__
	from openexp.keyboard import keyboard
	my_keyboard = keyboard(self.experiment)

	# Enter an infinite loop, which is broken when the user
	# presses 'q'. Note that pressing escape raises an exception,
	# so escape also quits the experiment.
	while True:

		# Get a response
		note, time = my_keyboard.get_key()

		# Quit if the Q is pressed
		if note == 'q':
			break

		# If the pressed key is in the range A to G
		if note in self.notes:

			# Show the play canvas
			self.c_play.show()

			# Play the note
			# Passing True makes the function wait until the note is finished
			start_time = self.time()
			self.soundbank[note].play(True)
			end_time = self.time()

			# Log the the timing error
			time_error = 100 - end_time + start_time
			self.log("Error = %d" % time_error)

			# Show the not playing canvas
			self.c_stop.show()
	__end__
	___prepare__
	# Import the appropriate modules from OpenExp
	import openexp.synth
	import openexp.canvas

	# Create a list of notes. We only use 'whole' notes (i.e., no flats and sharps)
	self.notes = ["a", "b", "c", "d", "e", "f", "g"]
	self.soundbank = {}

	# Fill a soundbank with generated sounds for each note. This works
	# because the synthesizer accepts frequencies in the form of
	# A1, a#1, etc., in addition to simple frequencies in Hz
	for note in self.notes:
		self.soundbank[note] = openexp.synth.synth(self.experiment, osc = "sine", freq = "%s1" % note)

	# Create a canvas to show while a note is playing
	self.c_play = self.offline_canvas()
	self.c_play.text("Playing")

	# Create a canvas to play while silent
	self.c_stop = self.offline_canvas()
	self.c_stop.text("Not playing (press 'Q' to quit)")
	__end__
	set description "Executes Python code"

define sequence experiment
	run welcome "always"
	run inline_script "always"

define sketchpad welcome
	set duration "0"
	set start_response_interval "no"
	draw textline 0 0 "Press keys (A - G) to play notes and Q to exit ..." center=1 color=white font_family=mono font_size=18 show_if="always"
