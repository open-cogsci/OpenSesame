# Generated by OpenSesame 0.27.2 (Frisky Freud)
# Thu Jun 20 16:29:43 2013 (posix)
# <http://www.cogsci.nl/opensesame>

set foreground "white"
set subject_parity "even"
set font_size "60"
set description "Default description"
set title "New experiment"
set start "experiment"
set font_bold "no"
set coordinates "relative"
set height "800"
set mouse_backend "droid"
set width "1280"
set compensation "0"
set sampler_backend "legacy"
set keyboard_backend "droid"
set background "black"
set custom_cursor "no"
set subject_nr "0"
set canvas_backend "droid"
set font_family "mono"
set synth_backend "droid"
set font_italic "no"

define inline_script setup_script
	___run__
	# Global variables are here
	# This probably isn't best practice
	
	from openexp.mouse import mouse
	from openexp.canvas import canvas
	from openexp.keyboard import keyboard
	import urllib
	#import socket
	#import errno
	import os
	import time
	#Using more than one timing method?
	from pygame.mouse import get_pressed
	from random import randint
	subject_number = randint(1,99999)
	
	try:
	    import android
	except ImportError:
	    android = None
	
	#Define global variables/methods
	my_mouse = mouse(exp, visible = True)
	my_canvas = canvas(exp, auto_prepare=False)
	my_keyboard = keyboard(exp)
	exp.set('run_experiment', 1)
	
	global my_mouse, my_canvas, my_keyboard, urllib, event
	global pickle, os, android, time, get_pressed, subject_number
	print 'Path = '+str(os.path.curdir)
	
	sdcard_folders = ['/sdcard/', '/mnt/sdcard/']
	for path in sdcard_folders:
		if os.path.isdir(path):
			print path
			break
	if os.path.exists(os.path.join(path, 'datafile.txt')):
		data_path = os.path.join(path, 'datafile.txt')
	elif os.path.exists('datafile.txt'):
		data_path = 'datafile.txt'
	else:
		data_path = None
	global data_path
	if data_path:
		print 'Unsent data detected'
		my_canvas.clear()
		my_canvas.text('Unsent data detected. Send now?')
		my_canvas.text('Yes', x=150, y=125)
		my_canvas.text('No', x=1050, y=125)
		my_canvas.show()
		while 1:
			button, position, timestamp = my_mouse.get_click()	
			x, y = position
			if x < 350 and y < 200:
			#Yes
				try:
					print 'Opening data...'
					#f = open('datafile.txt', 'rb')
					#f.seek(0)
					#data = pickle.load(f)
					#f.close()
					execfile(data_path)
					global data_log
					print 'Opened'
					send_data(data_log, True)
				except IOError as e:
					my_canvas.clear()
					my_canvas.text('No data found.U+005CnTap to continue.')
					my_canvas.show()
					my_mouse.get_click()
				break
			if x > 930 and y < 200:
				#No
				#This overwrites old data.
				#Add a warning about this.
				break
		my_canvas.clear()
		my_canvas.text('Continue to experiment?')
		my_canvas.text('Yes', x=150, y=125)
		my_canvas.text('No', x=1050, y=125)
		my_canvas.show()
		waiting = True
		while waiting:
			button, position, timestamp = my_mouse.get_click()	
			x, y = position
			if x < 350 and y < 200:
				exp.set('run_experiment', 1)
				break
			if x > 930 and y < 200:
				exp.set('run_experiment', 0)
				break
	
	data_log = []
	trial_id = 0
	global data_log, trial_id
	__end__
	___prepare__
	# Global functions are defined here
	def send_data(data, delete):
		my_canvas.clear()
		my_canvas.text('Connecting to server...')
		my_canvas.show()
		
		#Try to open the connection
		address = 'http://cogsci.nl/etravers/androidsql.php'
		
		try:
			page = urllib.urlopen(address, 'position=openingconnection')
			page.close()
			#Connection works. Send data.
			print 'Connected'
			t = 0
			for trial in data:
				progress = int(float(t)/len(data)*680)
				#print t, len(data), progress
				my_canvas.clear()
				my_canvas.text('Sending...')
				my_canvas.rect(300, 600, 680, 72, False, 'white')
				my_canvas.rect(303, 601, progress, 70, True, 'red')
				my_canvas.show()
				encode_data = urllib.urlencode(trial)
				print encode_data
				for i in range(5):
					try:
						page = urllib.urlopen(address, encode_data)
						page.close()
						print 'Sent!', t
					except IOError as e:
							print str(e)
					else:
						break
				t += 1
			result = 'Data sent!'
			# Delete sent datafile
			if delete:
				if os.path.isfile(data_path):
					os.remove(data_path)
		except IOError as e:
			result = 'Unable to connect.U+005CnPlease try again when connected to the internet.'
			# Consider retrying a few times automatically?
			save_data()
			print str(e)
		my_canvas.clear()
		my_canvas.text(result)
		my_canvas.show()
		my_mouse.get_click()
	
	def save_data():
		sdcard_folders = ['/sdcard/', '/mnt/sdcard/']
		for path in sdcard_folders:
			if os.path.isdir(path):
				break
		try:
			f = open(os.path.join(path, 'datafile.txt'), 'w')
		except:
			print 'Failed to create %s' % path
			f = open('datafile.txt', 'w')
		f.truncate()
		f.write( 'data_log = ' + repr(data_log)+'U+005Cn' + 'global data_log')
		f.close()
		
	
	global send_data, save_data
	__end__
	set description "Executes Python code"

define loop touch_response_loop
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set offset "no"
	set item "touch_response_sequence"
	set column_order "word;colour"
	set cycles "12"
	set order "random"
	setcycle 0 colour "red"
	setcycle 0 word "'left'"
	setcycle 1 colour "red"
	setcycle 1 word "'left'"
	setcycle 2 colour "red"
	setcycle 2 word "'right'"
	setcycle 3 colour "red"
	setcycle 3 word "'right'"
	setcycle 4 colour "red"
	setcycle 4 word "'up'"
	setcycle 5 colour "red"
	setcycle 5 word "'down'"
	setcycle 6 colour "green"
	setcycle 6 word "'left'"
	setcycle 7 colour "green"
	setcycle 7 word "'left'"
	setcycle 8 colour "green"
	setcycle 8 word "'right'"
	setcycle 9 colour "green"
	setcycle 9 word "'right'"
	setcycle 10 colour "green"
	setcycle 10 word "'down'"
	setcycle 11 colour "green"
	setcycle 11 word "'up'"
	run touch_response_sequence

define sequence traceStroop_sequence
	run traceStroop_script "always"

define inline_script end
	___run__
	
		
	my_canvas.clear()
	my_canvas.text('Thanks for taking part!')
	my_canvas.show()	
			
	my_mouse.get_click()
	__end__
	set _prepare ""
	set description "Executes Python code"

define loop keyboard_loop
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "keyboard_script"
	set column_order "question"
	set cycles "2"
	set order "sequential"
	setcycle 0 question "What model of phone are you using?"
	setcycle 1 question "Roughly how long have you had it?"
	run keyboard_script

define form_text_display trace_instructions
	set rows "1;4;1"
	set description "A simple text display form"
	set cols "1;1;1"
	__form_text__
	<span size=30>
	In this variation of the previous task, start each trial by pressing and holding the 'Home' button.
	Once the word appears, slide your finger to the response keys in the top left and right corners, without leaving the screen.
	(Please try not to lift your finger, as this may abort trials on some devices.)
	There will be 12 trials.</span>
	__end__
	set form_title "<span size=40>Touch Tracing Time Task</span>"
	set ok_text "Ok"
	widget 0 0 3 1 label text="[form_title]"
	widget 0 1 3 1 label center="no" text="[form_text]"
	widget 1 2 1 1 button text="[ok_text]"


define sequence experiment
	run instructions "always"
	run setup_script "always"
	run run_experiment "always"
	run end "always"

define inline_script connect_prompt_script
	___run__
	my_canvas.clear()
	my_canvas.set_font(size=60)
	my_canvas.text('End of experiment.', x=640, y=400)
	my_canvas.show()
	time.sleep(1)
	
	my_canvas.clear()
	my_canvas.text('Send data now?', x=640, y=400)
	my_canvas.text('Yes', x=150, y=125)
	my_canvas.text('No', x=1050, y=125)
	my_canvas.show()
	
	for trial in data_log:
		print trial
	
	
	
	waiting = True
	while waiting:
		button, position, timestamp = my_mouse.get_click()	
		x, y = position
		if x < 350 and y < 200:
			# YES
			send_data(data_log, False)
			break
		if x > 930 and y < 200:
			# NO
			save_data()
			my_canvas.clear()
			my_canvas.text('Please reopen this App when youU+005C're connected to the internet to send data.', x=640, y=400)
			my_canvas.show()
			my_mouse.get_click()
			break
	__end__
	set _prepare ""
	set description "Executes Python code"

define inline_script keyboard_script
	___run__
	w, h = 125, 120
	start_x = 15
	start_y = 315
	my_canvas.set_font(size=40)
	question = exp.get('question')
	
	alpha = [['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'], ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'], ['z', 'x', 'c', 'v', 'b', 'n', 'm']]
	numeric = [['1', '2', '3', '0', '+', '-', '#', '@', '(', ')'],
				['4', '5', '6', '*', '/', 'U+00A3', '?', '!', "'"],
				['7', '8', '9', ',', '.', '$', 'U+20AC']]
	typed = ''
	key_map = alpha
	
	
	alpha_image = exp.get_file('alpha.png')
	numeric_image = exp.get_file('numeric.png')
	key_image = alpha_image
	
	typing = True
	while typing:
		my_canvas.clear()
		my_canvas.text(question, False, 100, 50)
		my_canvas.image(key_image, False, 0, 300)
		#
		my_canvas.text(typed, False, 100, 200)
		my_canvas.show()
		button, position, timestamp = my_mouse.get_click()
		x, y = position
		if y > start_y:
			row = (y - start_y)/h
			col = (x-(row*70) - start_x)/w
			try:
				key = key_map[row][col]
				typed = typed+key
			except IndexError:
				pass
			if row ==2 and (col > 6):
				#Delete
				typed = typed[:-1]
			if y > start_y+(3*h):
				#bottom row
				if x > start_x + (2*w) and x < start_x+(7*w):
					#Space
					typed = typed+' '
				if x > start_x+(7*w) and x < start_x+(8.5*w):
					#Change Map
					if key_map == alpha:
						key_map = numeric
						key_image = numeric_image
					else:
						key_map = alpha
						key_image = alpha_image
				if x > start_x+(8.5*w):
					#ENTER
					typing = False
					break
					
	#Log data
	trial_data = {'subject_number': subject_number, 'trial': trial_id, 'type': 'keyboard', 'question': question, 'response': typed}
	data_log.append(trial_data)
	trial_id = trial_id + 1
	__end__
	set _prepare ""
	set description "Executes Python code"

define sequence touch_response_sequence
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run touch_response_script "always"

define loop traceStroop_loop
	set repeat "2"
	set description "Repeatedly runs another item"
	set skip "0"
	set offset "no"
	set item "traceStroop_sequence"
	set column_order "word;colour"
	set cycles "6"
	set order "random"
	setcycle 0 colour "red"
	setcycle 0 word "'left'"
	setcycle 1 colour "red"
	setcycle 1 word "'right'"
	setcycle 2 colour "red"
	setcycle 2 word "'up'"
	setcycle 3 colour "green"
	setcycle 3 word "'left'"
	setcycle 4 colour "green"
	setcycle 4 word "'right'"
	setcycle 5 colour "green"
	setcycle 5 word "'down'"
	run traceStroop_sequence

define notepad getting_started
	__note__
	- Need to implement check_if_paused functionality from Pygame for Android,
	more consistently so that the experiment doesn't crash if paused.
	- touch_stroop script doesn't properly clear the event queue, meaning that a double-click
	on one trial is counted as an instant response to the next one.
	- Probably still redundant code to remove.
	- Consider add a few retries when trying to send data? And maybe a timeout?
	
	data_log
	Keyboard:
	trial_data = {'trial': trial_id, 'type': 'keyboard', 'question': question, 'response': typed}
	Touch Stroop:
	trial_data = {'trial': trial_id, 'type': 'RT', 'probe': word, 'colour': colour, 'response': response, 'rt': reaction_time}
	Trace Stroop:
	trial_data = {'trial': trial_id,
								'type': 'Trace',
								'probe': word,
								'colour': colour, 
								'response': response, 
								'rt': t,
								'xList': xList,
								'yList': xList,
								'tList': xList,
								}
	__end__
	set description "Some pointers to help you get started!"

define inline_script traceStroop_script
	___run__
	word = exp.get('word')
	colour = str(exp.get('colour'))
	answered = False
	#Over sampling causes problems.
	#Keep the rate on the safe side.
	rate = 50
	timeLimit = 2000
	print 'trial '+str(trial_id)
	
	#Go home
	my_canvas.clear()
	my_canvas.image(home_key, False, 615, 720)
	my_canvas.show()
	while 1:
		button, position, timestamp = my_mouse.get_click()
		x, y = position
		if x > 615 and x < 662 and y > 720:
			break
	
	
	# TODO: Restart trial if participant moves from Home button
	# too soon.
	my_canvas.clear()
	my_canvas.text('+')
	my_canvas.rect(0, 0, 200, 100, True, 'green')
	my_canvas.rect(1080, 0, 200, 100, True, 'red')
	my_canvas.show()
	time.sleep(1)
	my_canvas.clear()
	my_canvas.rect(0, 0, 200, 100, True, 'green')
	my_canvas.rect(1080, 0, 200, 100, True, 'red')
	my_canvas.show()
	time.sleep(1)
	
	
	my_canvas.clear()
	my_canvas.text(word, color = colour)
	my_canvas.rect(0, 0, 200, 100, True, 'green')
	my_canvas.rect(1080, 0, 200, 100, True, 'red')
	my_canvas.show()
	
	
	start_time = exp.time()
	nextTime = start_time + rate
	print 'tracking'
	while 1:
		timeNow = exp.time()
		if timeNow > nextTime:
			position, timestamp = my_mouse.get_pos()
			lClick, mClick, rClick = get_pressed()
			if lClick:
				x, y = position
				print str(x)+' '+str(y)
			t = timestamp - start_time
			xList.append(x)
			yList.append(y)
			tList.append(t)
			if x < 200 and y < 100:
				response = 1
				answered = True
			if x > 1080 and y < 100:
				response = 2
				answered = True
			if t > timeLimit:
				response = 0
				t = -1
				print 'TIMEOUT'
				answered = True
			if answered:
				#if responses[response] == colour:
				#	accuracy = 1
				#else:
				#	accuracy = 0
				if response == 0:
					my_canvas.clear()
					my_canvas.text('Please respond more quickly')
					my_canvas.show()
					time.sleep(2)
	
				break
			time.sleep(.02)
	
	
	trial_data = {'subject_number': subject_number, 
					'trial': trial_id,
					'type': 'Trace',
					'probe': word,
					'colour': colour, 
					'response': response, 
					'rt': t,
					'xList': xList,
					'yList': yList,
					'tList': tList,
					}
	data_log.append(trial_data)
	trial_id += 1
	__end__
	___prepare__
	responses = [None, 'green', 'red']
	home_key = exp.get_file('home.png')
	xList = []
	yList = []
	tList = []
	
	global xList, yList, tList, responses, home_key
	__end__
	set description "Executes Python code"

define text_display instructions
	set foreground "white"
	set font_size "40"
	set description "Presents a display consisting of text"
	set maxchar "25"
	set align "center"
	set content "This is the test app for OpenSesame Android"
	set background "black"
	set duration "mouseclick"
	set font_family "mono"

define inline_script touch_response_script
	___run__
	word = exp.get('word')
	colour = str(exp.get('colour'))
	
	my_canvas.clear()
	my_canvas.text('+')
	my_canvas.circle(200, 400, 50, True, 'green')
	my_canvas.circle(1080, 400, 50, True, 'red')
	my_canvas.show()
	time.sleep(.75)
	my_canvas.clear()
	my_canvas.circle(200, 400, 50, True, 'green')
	my_canvas.circle(1080, 400, 50, True, 'red')
	my_canvas.show()
	time.sleep(.75)
	my_canvas.clear()
	my_canvas.text(word, color = colour)
	my_canvas.circle(200, 400, 50, True, 'green')
	my_canvas.circle(1080, 400, 50, True, 'red')
	my_canvas.show()
	start_time = exp.time()
	
	#wait
	button, position, timestamp = my_mouse.get_click()
	if position[0] < 640:
		response = 1
	else:
		response = 2
	if response == colour:
		accuracy = 1
	else:
		accuracy = 0
		
	reaction_time = timestamp - start_time
	
	#Append results Dict to data
	trial_data = {'subject_number': subject_number, 'trial': trial_id, 'type': 'RT', 'probe': word, 'colour': colour, 'response': response, 'rt': reaction_time}
	trial_id += 1
	data_log.append(trial_data)
	#print trial_data
	#my_mouse.get_click()
	#Wait for finger lift
	my_canvas.clear()
	__end__
	set _prepare ""
	set description "Executes Python code"

define sequence run_experiment
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run keyboard_loop "[run_experiment] = 1"
	run touch_response_loop "[run_experiment] = 1"
	run connect_prompt_script "[run_experiment] = 1"

define form_text_display touch_instructions
	set rows "1;4;1"
	set description "A simple text display form"
	set cols "1;1;1"
	__form_text__
	<span size=40>This is a basic Stroop task.
	Your job is to hit the button corresponding to the colour of the text that appears onscreen, ignoring what the text actually says.
	Please respond as quickly as possible.
	There will be 36 trials.</span>
	__end__
	set form_title "<span size=40>Reaction Time Task</span>"
	set ok_text "Ok"
	widget 0 0 3 1 label text="[form_title]"
	widget 0 1 3 1 label center="no" text="[form_text]"
	widget 1 2 1 1 button text="[ok_text]"


