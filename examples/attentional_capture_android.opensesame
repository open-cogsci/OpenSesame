# Generated by OpenSesame 0.27.2~pre6 (Frisky Freud)
# Thu May  9 14:15:27 2013 (posix)
# <http://www.cogsci.nl/opensesame>

set foreground "white"
set subject_parity "even"
set font_size "18"
set description "An attention capture paradigm, modified for the Android runtime"
set title "Attentional capture for Android"
set transparent_variables "no"
set font_family "mono"
set font_bold "no"
set coordinates "relative"
set height "800"
set mouse_backend "droid"
set start "experiment"
set compensation "0"
set sampler_backend "legacy"
set keyboard_backend "droid"
set background "black"
set subject_nr "0"
set canvas_backend "droid"
set width "1280"
set synth_backend "droid"
set font_italic "no"

define sketchpad green_fixdot
	set duration "500"
	set description "Displays stimuli"
	set start_response_interval "no"
	draw line 0 0 0 0 penwidth=1 color=green show_if="always"
	draw fixdot 0 0 color=green show_if="always"

define sketchpad fixdot
	set duration "600"
	set description "A fixation dot"
	set start_response_interval "no"
	draw fixdot 0 0 color=white show_if="always"

define feedback feedback
	set duration "mouseclick"
	set reset_variables "yes"
	set description "Provides feedback to the participant"
	draw textline 0 -128 "Your average response time was [avg_rt]ms" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 0 -64 "Your accuracy was [acc]%" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 0 64 "Tap the screen to continue ..." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"

define sequence experiment
	set description "The main experimental sequence"
	run form_text_display "always"
	run practice_loop "always"
	run end_of_practice "always"
	run experimental_loop "always"
	run goodbye "always"

define sketchpad end_of_practice
	set duration "mouseclick"
	set description "Tell the participant that the practice phase is finished"
	set start_response_interval "no"
	draw textline 0 -64 "The practice phase is finished" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 0 64 "Tap the screen to start the real experiment ..." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"

define sketchpad cross
	set duration "600"
	set description "A fixation cross"
	set start_response_interval "no"
	draw line 0 -8 0 8 penwidth=2 color=white show_if="always"
	draw line -8 0 8 0 penwidth=2 color=white show_if="always"

define loop practice_loop
	set repeat "1"
	set description "Run a single practice block"
	set item "block_sequence"
	set column_order "practice;condition"
	set cycles "2"
	set order "random"
	setcycle 0 practice "yes"
	setcycle 0 condition "color"
	setcycle 1 practice "yes"
	setcycle 1 condition "form"
	run block_sequence

define sketchpad red_fixdot
	set duration "500"
	set description "Displays stimuli"
	set start_response_interval "no"
	draw fixdot 0 0 color=red show_if="always"

define loop experimental_loop
	set item "block_sequence"
	set cycles "2"
	set description "Run a number of experimental blocks"
	set repeat "8"
	set order "random"
	setcycle 0 practice "no"
	setcycle 0 condition "color"
	setcycle 1 practice "no"
	setcycle 1 condition "form"
	run block_sequence

define reset_feedback reset_feedback

define sequence trial_sequence
	set description "A single trial"
	run cross "always"
	run fixdot "always"
	run search_display "always"
	run red_fixdot "[correct] = 0"
	run green_fixdot "[correct] = 1"
	run logger "always"

define sketchpad goodbye
	set duration "mouseclick"
	set description "Say goodbye!"
	set start_response_interval "no"
	draw textline 0 -64 "The experiment is finished!" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"
	draw textline 0 64 "Tap the screen to exit ..." center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always"

define loop block_loop
	set repeat "1"
	set description "A block of trials"
	set skip "0"
	set offset "no"
	set item "trial_sequence"
	set column_order "distractor;N;targetShape"
	set cycles "12"
	set order "random"
	setcycle 0 N "5"
	setcycle 0 targetShape "circle"
	setcycle 0 distractor "absent"
	setcycle 1 N "5"
	setcycle 1 targetShape "square"
	setcycle 1 distractor "absent"
	setcycle 2 N "7"
	setcycle 2 targetShape "circle"
	setcycle 2 distractor "absent"
	setcycle 3 N "7"
	setcycle 3 targetShape "square"
	setcycle 3 distractor "absent"
	setcycle 4 N "9"
	setcycle 4 targetShape "circle"
	setcycle 4 distractor "absent"
	setcycle 5 N "9"
	setcycle 5 targetShape "square"
	setcycle 5 distractor "absent"
	setcycle 6 N "5"
	setcycle 6 targetShape "circle"
	setcycle 6 distractor "present"
	setcycle 7 N "5"
	setcycle 7 targetShape "square"
	setcycle 7 distractor "present"
	setcycle 8 N "7"
	setcycle 8 targetShape "circle"
	setcycle 8 distractor "present"
	setcycle 9 N "7"
	setcycle 9 targetShape "square"
	setcycle 9 distractor "present"
	setcycle 10 N "9"
	setcycle 10 targetShape "circle"
	setcycle 10 distractor "present"
	setcycle 11 N "9"
	setcycle 11 targetShape "square"
	setcycle 11 distractor "present"
	run trial_sequence

define logger logger
	set description "Logs experimental data"
	log "display_size"
	log "distractor"
	log "practice"
	log "condition"
	log "response"
	log "correct"
	log "response_time"

define sequence block_sequence
	set description "An instruction screen, followed by a block of trials and feedback"
	run reset_feedback "always"
	run block_loop "always"
	run feedback "always"

define form_text_display form_text_display
	set rows "1;4;1"
	set description "A simple text display form"
	set cols "1;1;1"
	__form_text__
	Your goal is to tap the unique shape (e.g., the circle among squares).
	
	Be as fast and accurate as possible.
	
	Colors are not important!
	
	You will start with a short practice phase ...
	__end__
	set form_title "<span size=24>Instructions</span>"
	set ok_text "Got it!"
	widget 0 0 3 1 label text="[form_title]"
	widget 0 1 3 1 label center="no" text="[form_text]"
	widget 1 2 1 1 button text="[ok_text]"


define inline_script search_display
	___run__
	from openexp.mouse import mouse
	from math import sqrt
	
	my_mouse = mouse(exp, timeout=5000)
	t1 = self.my_canvas.show()
	button, pos, t2 = my_mouse.get_click()
	if pos == None:
		click_x, click_y = 0, 0 # Timeout
	else:
		click_x, click_y = pos
	
	correct = 0
	if pos != None:
		d = sqrt((self.get('target_x')-click_x)**2 + (self.get('target_y')-click_y)**2)
		if d < 100:
			correct = 1
		
	response_time = t2-t1
	
	exp.set('correct', correct)
	exp.set('response_time', response_time)
	
	exp.set('total_responses', self.get('total_responses')+1)
	exp.set('total_correct', self.get('total_correct')+correct)
	exp.set('total_response_time', self.get('total_response_time')+response_time)
	
	avg_rt = self.get('total_response_time')/self.get('total_responses')
	acc = 100.*self.get('total_correct')/self.get('total_responses')
	
	exp.set('average_response_time', avg_rt)
	exp.set('avg_rt', avg_rt)
	exp.set('accuracy', acc)
	exp.set('acc', acc)
	__end__
	___prepare__
	from openexp.canvas import canvas
	from random import shuffle, choice
	from math import cos, sin, pi
	
	N = self.get('N')
	targetShape = self.get('targetShape')
	distractor = self.get('distractor')
	targetColor = choice(['red', 'green'])
	xc = self.get('width')/2
	yc = self.get('height')/2
	
	stimPositions = range(0, N)
	shuffle(stimPositions)
	
	targetPos = stimPositions.pop()
	if distractor == 'present':
		distPos = stimPositions.pop()
	else:
		distPos = -1
		
	if targetShape == 'circle':
		distShape = 'square'
	else:
		distShape = 'circle'
		
	if targetColor == 'red':
		distColor = 'green'
	else:
		distColor = 'red'
	
	ecc = 300
	stimSize = 64
	
	self.my_canvas = canvas(exp)
	self.my_canvas.fixdot()
	for i in range(N):
		a = i*2.*pi / N 	
		x = ecc * cos(a) + xc
		y = ecc * sin(a) + yc
		
		if i == targetPos:
			shape = targetShape		
			exp.set('target_x', x)
			exp.set('target_y', y)
		else:
			shape = distShape
		if i == distPos:
			exp.set('dist_x', x)
			exp.set('dist_y', y)
			color = distColor
		else:
			color = targetColor
			
		if shape == 'circle':
			self.my_canvas.circle(x, y, stimSize/2, fill=True, color=color)
		else:
			self.my_canvas.rect(x-stimSize/2, y-stimSize/2, stimSize, stimSize, fill=True, color=color)
			
	exp.set('targetColor', targetColor)
	__end__
	set description "The search display"

